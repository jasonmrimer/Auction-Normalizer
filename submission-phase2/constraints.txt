Design your constraints: Create a file called constraints.txt in this file, you will specify, in plain English, how you implemented each of the 16 constraints in your database schema. Specifically, for each constraint, you need to state: 1) How the constraint was implemented did you choose to use a Key constraint (using PRIMARY KEY or UNIQUE), a Referential Integrity constraint, a CHECK constraint, or a Trigger? (Note that in SQLite, Referential Integrity constraints are often referred to as Foreign Key constraints.) 2) Which file(s) contain the constraint implementation this will be useful for us when we grade your Trigger constraints, if you have any.


• Constraints for Users
1. No two users can share the same User ID.
- I made the id of user table a primary key.
(file: create.sql, approximate line: 31)

2. All sellers and bidders must already exist as users.
- I created a bid_with_new_user trigger that creates a new user if the bidding user does not exist. I chose this method for the sake of the user experience (i.e., to avoid an error-state that denies a bid).
(file: trigger1_drop.sql)
- Ditto for the seller onto auctions via auction_with_new_user.
(file: trigger2_drop.sql)
*Note, for both of these constraints the normalize.sql runs joins on the data imported from the JSON files to ensure a normalized database that begins with referential integrity.
(file: normalize.sql, , approximate line: {seller: 71, 87}, {bidder: 103, 112})


• Constraints for Items

1. No two items can share the same Item ID.
- I made the id for auction a primary key.
(file: create.sql, approximate line: 46)
*Note, before importing JSON my application enables referential integrity for SQLite ensuring it enforces this constraint.
(file: normalize, approximate line: 1)

2. Every bid must correspond to an actual item.
- I made auction_id a foreign key on the bid table. I also joined the bid and auction from the JSON import to enforce the rule for existing relationships.
(file: normalize.db, approximate line: 111)

3. The items for a given category must all exist.
- I created a join table for auction and category ('join_auction_category') that uses foreign keys for each id.
(file: normalize.db, approximate line: 139-158)

4. An item cannot belong to a particular category more than once.
- I created an abortive unique constraint on the super key: {auction_id, category_id} for the join_auction_category table.
(file: normalize.db, approximate line: 146)

5. The end time for an auction must always be after its start time.
- I created a check constraint on auction that ensures end time is after start time.
(file: normalize.db, approximate line: 72)

6. The Current Price of an item must always match the Amount of the most recent bid for that item.
- I created a trigger that adds the newest bid price to the auction's highest_bid price; although, it does NOT check that it is the actually highest (yet) just the most recent.
(file: trigger3_drop.sql, auction_highest_price_on_new_bid)
*Note, I enforced all previous additions from the JSON ingest via an update that selects the max bid for an auction (file: normalize, approximate line: 127-133)


• Constraints for Bidding

1. A user may not bid on an item he or she is also selling.
- I created an abortive trigger (with error message) that validates sellers cannot be bidders.
(file: trigger4_drop.sql, seller_cannot_bid_on_auction)

2. No auction may have two bids at the exact same time.
- I created an abortive unique constraint on the bid table that enforces a single time per auction.
(file: normalize, approximate line: 105)

3. No auction may have a bid before its start time or after its end time.
- I created an abortive trigger (with an error message) that ensures the bid time is between the auction start and end.
(file: trigger5_add.db, bid_time_must_be_within_auction_time)

4. No user can make a bid of the same amount to the same item more than once.
- I created the primary key of the bid table to include the auction_id, user_id, and amount thus enforcing this rule.
(file: normalize, approximate line: 104)

5. In every auction, the Number of Bids attribute corresponds to the actual number of bids for that particular item.
- I created an updating trigger that calculates the new total bids count for an auction upon new bids.
(file: trigger6_add.db, new_bids_update_auction_number_of_bids)

6. Any new bid for a particular item must have a higher amount than any of the previous bids for that particular item.
- I created an abortive trigger (with error message) that denies the entry of a bid less than the current highest bid.
(file: trigger7_add.db, new_bids_exceed_current_highest_bid)
*Note, I enforced all previous additions from the JSON ingest via an update that selects the max bid for an auction (file: normalize, approximate line: 127-133)


• Constraints for Time

1. All new bids must be placed at the time which matches the current time of your AuctionBase system.
- I created an updating trigger that replaces the actual time of a bid with "pseudo now"--the artificial time determined by the pseudo_time table.
(file: trigger8_add.db, all_new_bids_occur_at_pseudo_now)

2. The current time of your AuctionBase system can only advance forward in time, not backward in time.
- I created a trigger that aborts any attempts to move the pseudo time to any time before the "current time".
(file: trigger9_add.db, pseudo_time_moves_forward)
